# -*- coding: utf-8 -*-
# MorphX - Toolkit for morphology exploration and segmentation
#
# Copyright (c) 2019 - now
# Max Planck Institute of Neurobiology, Martinsried, Germany
# Authors: Jonathan Klimesch

import numpy as np
from collections import defaultdict
from morphx.classes.hybridcloud import HybridCloud
from morphx.classes.pointcloud import PointCloud


def extract_mesh_subset(hybrid: HybridCloud, local_bfs: np.ndarray) -> PointCloud:
    """ Returns the mesh subset of given skeleton nodes based on a mapping dict between skeleton and mesh.

    Args:
        vertices: Array of mesh vertices with shape (n,3).
        mapping: Dict with skeleton nodes as keys and corresponding vertices in form of lists as values
        local_bfs: Skeleton node index array which was generated by a local BFS.

    Returns:
        Array of vertices with shape (n, 3).
    """
    mapping = hybrid.vert2skel_dict
    vertices = hybrid.vertices

    total = []
    for i in local_bfs:
        total.extend(mapping[i])

    return PointCloud(vertices[total])
